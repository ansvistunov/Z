/**
	Copyrigth(c) 1999, by Gama
	author Alexey Chen (xx.2.99)
*/

package rml;

/**
*/

import java.util.*;
import calc.*;
import calc.objects.*;
/**
	Узел дерева свойств
*/
public class Proper implements GlobalValuesObject,class_type,class_field,class_method{
	
	public String tag = "UNKNOWN";
	public Proper content = null;
	public Proper next = null;;
	public Hashtable hash;
	Hashtable dhash = null;
	static Hashtable sdhash = null;
		
	public Proper(){
		hash = new Hashtable();
		if ( dhash == null ) {
			if (sdhash == null) {
				sdhash = hash;
			}
			dhash = sdhash;
		}
	}

	public Proper( String tag, Proper defu){
		hash = new Hashtable();
		if ( defu == null ) dhash = null;
		else dhash = defu.hash;
		this.tag = tag;
	}

	public static void clearDefault(){
		sdhash = null;
	}
	
	public Object get(String alias){
		Object res;
		res = hash.get(alias);
		if ( res == null ){
			if ( dhash != null ){
				res = dhash.get(alias);
			}
		}
		return res;
	}

	public Object get(String alias,Object o){
		Object res;
		res = hash.get(alias);
		if ( res == null ){
			if ( dhash != null ){
				res = dhash.get(alias);
			}
		}
		if ( res == null ) res = o;
		return res;
	}

	public void put(String alias,Object obj){
		//System.out.println("~rml.Proper::put alias="+alias+", obj="+obj);
		hash.put(alias,obj);
	}

	public static void add(Proper prop,Proper p){
		//System.out.println("~rml.Proper:add called");
		if (prop.content == null) prop.content = p;
		else {
			Proper foo = prop.content;
			while (foo.next!=null){
				foo = foo.next;
			}
			foo.next = p;
		}
	}

	void recur_dump(Proper prop, int rec,StringBuffer sbb){
		StringBuffer sb = new StringBuffer();
		for ( int i=0; i<rec ; ++i) sb.append("    ");
		String s = sb.toString();
		Proper foo = prop;
		while ( foo != null ){
			if ( rec != 0 ) sbb.append(s+"{"); 
			sbb.append(foo.tag+"\n");			
			Enumeration e = foo.hash.keys();
			while(e.hasMoreElements()){
				Object o = e.nextElement();
				if ( ((String)o).startsWith("##") ) continue; 
				Object oo = foo.hash.get(o);
			    sbb.append(s+"    "+
						   o+
						   " = "+
						   ((oo instanceof String)?"\"":"")+
						   oo+
						   ((oo instanceof String)?"\"":"")+
						   "\n");
			}
			recur_dump(foo.content,rec+1,sbb);
			if ( rec != 0 ) sbb.append(s+"}"); 
			sbb.append("\n");
			foo = foo.next;
		}
	}

	public void dump(){
		System.out.println(toText());
	}

	public String toText(){
		StringBuffer sbb = new StringBuffer("");
		sbb.append("//\n//Document generated by Zeta RML Browser\n//\n");
		recur_dump(this,0,sbb);
		return sbb.toString();
	}

/*	public String toString(){

		StringBuffer sbb = new StringBuffer("");
		sbb.append("\nBEGIN Dump of Proper tree\n");
		recur_dump(this,0,sbb);
		sbb.append("END Dump of Proper tree\n");
		return sbb.toString();
	}
*/	
// implementaion of GlobalValuesObject

	public void setValue(Object obj) throws Exception{}
    public Object getValue() throws Exception{return this;}
    public void setValueByName(String name, Object obj) throws Exception {}
    public Object getValueByName(String name) throws Exception {return null;}

//implementaion of class_method
	
	public Object method(String method,Object arg) throws Exception{
		throw new RTException("HasMethodException",
									"object Proper has not method "+method);
	}
	public String type() throws Exception{
		return "PROPER";
	}

//implementaion of class_field

	public Object field(String field) throws Exception{
		if ( field.equals("NEXT") ){
			return (next!=null)?(Object)next:new Nil();
		}else if ( field.equals("HASH") ){
			return (hash!=null)?(Object)hash:new Nil();
		}else if ( field.equals("DEFAULT") ){
			return (dhash!=null)?(Object)dhash:new Nil();
		}else if ( field.equals("TAG") ){
			return tag;
		}else if ( field.equals("CONTENT") ){
			return (content!=null)?(Object)content:new Nil();		
		}else throw new RTException("HasFieldException",
									"object Proper has not field "+field);
	}

	public Object set_field(String field,Object value) throws Exception{
		try{
			if ( field.equals("NEXT") ){
				if (value instanceof Nil) {
					next = null;
				}else next = (Proper)value;
				return value;
			}else if ( field.equals("CONTENT") ){
				if (value instanceof Nil) {
					content = null;
				}else content = (Proper)value;
				return value;
			}else if ( field.equals("HASH") ){
				if (value instanceof Nil) {
					hash = null;
				}else hash = (Hashtable)value;
				return value;
			}else if ( field.equals("DEFAULT") ){
				if (value instanceof Nil) {
					dhash = null;
				}else dhash = (Hashtable)value;
				return value;
			}else if ( field.equals("TAG") ){
				if (value instanceof Nil) {
					tag = null;
				}else tag = (String)value;
				return value;
			}else throw new RTException("HasFieldException",
										"object Proper has not field "+field);
		}catch(ClassCastException e){
			throw new RTException("CastException",
										"Proper@"+field);
		}
	}
	
}
